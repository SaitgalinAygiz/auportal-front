import React, {Fragment, useContext, useEffect, useState} from 'react'
import Feed from 'components/feed'
import Pagination from 'components/pagination'
import {getPaginator, paginationLimit} from "../../utils";
import Loading from 'components/loading'
import ErrorMessage from 'components/errorMessage'
import useFetch from 'hooks/useFetch'
import FindServices from './components/findServices'
import {stringify} from "query-string";
import {modalContext} from 'contexts/modalContext'
import SendRequest from 'pages/store/request'

const GlobalFeed = ({location, match}) => {
    const [searchConditions, setSearchConditions] = useState('')
    const {currentPage} = getPaginator(location.search)
    const stringifiedParams = stringify({
        page: currentPage,
        limit: paginationLimit
    })


    const [arrayFilterServices, setArrayFilterServices] = useState([])
    const [apiUrl, setApiUrl] = useState(`/subAccount?${stringifiedParams}`)
    const [{response, isLoading, error}, doFetch] = useFetch(apiUrl)
    const url = match.url

    const {modalContent, handleModal, modal} = useContext(modalContext)
    const [lastPrint, setLastPrint] = useState(0)
    const [isLargeInterval, setIsLargeInterval] = useState(false)
    const [wasSearchFetched, setWasSearchFetched] = useState(false)

    const handleServiceFilter = event => {
        if (arrayFilterServices.length === 0) {
            setApiUrl(`/subAccount/selectWithQuery?${stringifiedParams}&conditions=${searchConditions}&subAccountCategory=saleAutoParts`)
            doFetch()
            return
        }

        setApiUrl(`/subAccount/selectWithQuery?${stringifiedParams}
        &conditions=${searchConditions}&services=${arrayFilterServices}&subAccountCategory=saleAutoParts`)
        doFetch()
    }

    const handlePrintOnSearch = event => {
        console.log(event)
        largeInterval(event)
        setSearchConditions(event.target.value)
    }

    const largeInterval = event => {
        const interval = event.timeStamp - lastPrint
        if (interval > 1000) {
            setIsLargeInterval(true)
        } else {
            setIsLargeInterval(false)
        }
        setLastPrint(event.timeStamp)
    }

    const handleSendRequest = event => {
        event.preventDefault()
        handleModal(<SendRequest/>)
    }


    useEffect(() => {
        setApiUrl(`/subAccount/selectWithQuery?${stringifiedParams}&conditions=${searchConditions}&subAccountCategory=saleAutoParts`)
        if (searchConditions === '' || searchConditions == null || isLargeInterval === true) {
            doFetch()
        } else {
            if (wasSearchFetched === false) {
                setWasSearchFetched(true)
                setTimeout(() => {
                    doFetch()
                    setWasSearchFetched(false)
                }, 1000)
            }
        }

    }, [doFetch, searchConditions, currentPage])

    return (
        <section className="a1">
            <div className="container">
                <div className="a1c2">
                    <h2>Укажите какой ремонт нужно выполнить, отправьте заявку<br/>
                        во все автосервисы Уфы и выберите лучшие предложения по стоимости
                    </h2>
                    <a onClick={handleSendRequest} className="but1">Отправить заявку на просчет ремонта</a>
                </div>

                <div className="a1c3">
                    <div className="a1c3_row">
                        <div className="a1c3_item a1c3_drop">
                            <span>Все автосервисы</span>
                        </div>
                        <div className="a1c3_item a1c3_search">
                            <input
                                className="a1search"
                                type="search"
                                placeholder="Поиск по автозапчастям"
                                value={searchConditions}
                                onChange={e => handlePrintOnSearch(e)}
                            />
                        </div>
                        <div className="a1c3_item a1c3_map">
                            <a className="list_spis active">Списком</a>
                            <a className="list_map">На карте</a>
                        </div>
                        <div className="a1c3_item a1c3_fil">
                            <span>По умолчанию</span>
                            <div className="a1c3_fil_drop">
                                <ul>
                                    <li>По умолчанию</li>
                                    <li>С рейтингом от 4 звезд</li>
                                    <li>Ближайшие ко мне</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div className="a1c3_drop_down">

                        <FindServices setArrayFilterServices={setArrayFilterServices}/>

                        <a className="but1" onClick={handleServiceFilter}>Применить</a>
                    </div>
                </div>

                <div className="a1c1">
                    {error && <ErrorMessage/>}
                    { response && (
                        <Fragment>
                            {response.items.length === 0 && (
                                <div className="title1">
                                    <h2>Не найдено</h2>
                                </div>
                            )}
                            {response.items.length !== 0 && (
                                <>
                                    <div className="title1">
                                        <h2>Автозапчасти
                                            <span className="red">
                                                {arrayFilterServices.length > 0 ? ' ' + arrayFilterServices.toLocaleString() + ' ' : ' '}
                                            </span>
                                            в г. Уфа
                                        </h2>
                                        <p>Найдено: {response.items.length} магазинов автозапчастей</p>
                                    </div>
                                    <div className="list_map_all">
                                        <img src="/img/map.jpg"/>
                                    </div>
                                    <Feed subAccounts={response.items}/>
                                    {
                                        paginationLimit > response.items && (
                                            <Pagination
                                                total={response.items}
                                                limit={paginationLimit}
                                                url={url}
                                                currentPage={currentPage}
                                            />
                                        )
                                    }
                                    </>)}
                        </Fragment>
                    )}
                </div>
            </div>

        </section>
    )
}

export default GlobalFeed


